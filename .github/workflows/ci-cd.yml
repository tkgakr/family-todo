name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-rust:
    name: Test Rust Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --workspace

  test-frontend:
    name: Test Frontend Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linting
        working-directory: frontend
        run: npm run lint

      - name: Run tests
        working-directory: frontend
        run: npm run test

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  build-lambda:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    needs: [test-rust]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-lambda
        run: cargo install cargo-lambda

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Lambda functions
        run: |
          cargo lambda build --release --output-format zip

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: target/lambda/
          retention-days: 7

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend, build-lambda]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: target/lambda/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy with SAM
        run: |
          sam deploy \
            --template-file template.yaml \
            --stack-name family-todo-dev \
            --parameter-overrides Environment=dev \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Run health checks
        run: |
          chmod +x scripts/health-check.sh
          scripts/health-check.sh dev

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend, build-lambda]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-functions
          path: target/lambda/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-1' }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Deploy with SAM
        run: |
          sam deploy \
            --template-file template.yaml \
            --stack-name family-todo-prod \
            --parameter-overrides Environment=prod \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset

      - name: Run health checks
        run: |
          chmod +x scripts/health-check.sh
          scripts/health-check.sh prod

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run Rust security audit
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Run frontend security audit
        working-directory: frontend
        run: npm audit --audit-level=high

      - name: Run SAM template validation
        run: |
          pip install aws-sam-cli
          sam validate --template template.yaml

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Validate SAM template
        run: sam validate --template template.yaml

      - name: Run cfn-lint
        run: |
          pip install cfn-lint
          cfn-lint template.yaml

      - name: Check CloudFormation security
        uses: stelligent/cfn_nag@master
        with:
          input_path: template.yaml
