AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Family Todo App - AWS Serverless Backend with Event Sourcing

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: provided.al2
    Architectures:
      - arm64
    Environment:
      Variables:
        TABLE_NAME: !Ref MainTable
        RUST_LOG: info
        RUST_ENV: !Ref Environment
    Tracing: Active

Resources:
  # DynamoDB Table
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-MainTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FamilyTodoApp

  # Lambda Functions
  TodoCommandHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TodoCommandHandler'
      CodeUri: ../backend/command-handler/
      Handler: bootstrap
      ReservedConcurrencyLimit: 10
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MainTable
        - CloudWatchPutMetricPolicy: {}
        - XRayWritePolicy: {}
      Events:
        CreateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: post
        UpdateTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: put
        CompleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}/complete
            Method: post
        DeleteTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: delete

  TodoQueryHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TodoQueryHandler'
      CodeUri: ../backend/query-handler/
      Handler: bootstrap
      ReservedConcurrencyLimit: 20
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MainTable
        - DynamoDBReadPolicy:
            TableName: !Sub '${MainTable}/index/GSI1'
        - CloudWatchPutMetricPolicy: {}
        - XRayWritePolicy: {}
      Events:
        GetTodos:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos
            Method: get
        GetTodo:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}
            Method: get
        GetTodoHistory:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /todos/{id}/history
            Method: get
        GetFamilyMembers:
          Type: Api
          Properties:
            RestApiId: !Ref TodoApi
            Path: /family/members
            Method: get

  TodoEventProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TodoEventProcessor'
      CodeUri: ../backend/event-processor/
      Handler: bootstrap
      ReservedConcurrencyLimit: 5
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeadLetterQueue.Arn
      EventInvokeConfig:
        MaximumEventAge: 3600
        MaximumRetryAttempts: 3
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref MainTable
            StreamName: !GetAtt MainTable.StreamArn
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeadLetterQueue.QueueName
        - CloudWatchPutMetricPolicy: {}
        - XRayWritePolicy: {}
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MainTable.StreamArn
            StartingPosition: TRIM_HORIZON
            MaximumBatchingWindowInSeconds: 5
            ParallelizationFactor: 2
            BisectBatchOnFunctionError: true
            ReportBatchItemFailures: true
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {"NewImage": {"EntityType": {"S": ["Event"]}}}}'

  # API Gateway
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-TodoApi'
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Family-Id,X-User-Id'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'600'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      ThrottleConfig:
        BurstLimit: 100
        RateLimit: 50
      RequestValidation:
        ValidateRequestBody: true
        ValidateRequestParameters: true

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-UserPool'
      MfaConfiguration: OPTIONAL
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Schema:
        - Name: family_id
          AttributeDataType: String
          Mutable: false
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserPoolAddOns:
        AdvancedSecurityMode: AUDIT

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-WebClient'
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED

  # SQS Dead Letter Queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-DLQ'
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeoutSeconds: 60
      KmsMasterKeyId: alias/aws/sqs

  # CloudWatch Alarms
  CommandHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-CommandHandler-Errors'
      AlarmDescription: High error rate in Command Handler
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TodoCommandHandler
      AlarmActions:
        - !Ref AlertTopic

  QueryHandlerErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-QueryHandler-Errors'
      AlarmDescription: High error rate in Query Handler
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TodoQueryHandler
      AlarmActions:
        - !Ref AlertTopic

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-High-Latency'
      AlarmDescription: High latency in API responses
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 5000 # 5 seconds
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertTopic

  DLQMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-DLQ-Messages'
      AlarmDescription: Messages in Dead Letter Queue
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      AlarmActions:
        - !Ref AlertTopic

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-Alerts'
      DisplayName: Todo App Alerts

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  TableName:
    Description: DynamoDB Table Name
    Value: !Ref MainTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'